import os
from pathlib import Path

import click
import joblib
from sklearn.decomposition import PCA

from src import settings
from src.utils.gather_pa_spectra_from_dataset import calculate_mean_spectrum
from src.utils.susi import ExperimentResults


def load_data(data_base_root: str, gan_cinn_root: str, unit_root: str, target: str = "val"):

    if target == "val":
        test_real_data_root = os.path.join(data_base_root, "real_images", "validation")
    elif target == "test":
        test_real_data_root = os.path.join(data_base_root, "real_images", "test")
    else:
        raise KeyError("Choose either 'test' or 'val' as target data set!")

    sim_root = os.path.join(data_base_root, "good_simulations", "test")

    sources = {
        'real': test_real_data_root,
        'simulated': sim_root,
        'unit': unit_root,
        'inn': gan_cinn_root,
    }
    results = {}
    for name, path in sources.items():
        files = list(Path(path).glob('*.npz'))
        data = calculate_mean_spectrum(files)
        tissue_data = {'artery': data.get('artery_spectra_all'),
                       'vein': data.get('vein_spectra_all')}
        results[name] = tissue_data
    return results


def compute_pca(data_base_root: str, gan_cinn_root: str, unit_root: str, target: str = "val"):
    data = load_data(data_base_root, gan_cinn_root, unit_root, target)
    results = ExperimentResults()
    tissues = ['artery', 'vein']
    targets = list(data.keys())
    os.makedirs(settings.results_dir / 'pca', exist_ok=True)
    for tissue in tissues:
        pca = PCA(n_components=2)
        pca.fit(data['real'][tissue])
        for target in targets:
            x = data[target][tissue]
            pcs = pca.transform(x)
            results.append(name="data", value=[target for _ in range(pcs.shape[0])])
            results.append(name="tissue", value=[tissue for _ in range(pcs.shape[0])])
            results.append(name="pc_1", value=pcs[:, 0])
            results.append(name="pc_2", value=pcs[:, 1])
            joblib.dump(pca, str(settings.results_dir / 'pca' / f'pai_pca_{tissue}.joblib'))
    results = results.get_df()
    results.to_csv(settings.results_dir / 'pca' / f'pai_pca.csv', index=False)


@click.command()
@click.option('--pca', is_flag=True, help="compute principal component analysis of tissue structures")
@click.option('--target', type=str, default='val', help="target data set used to compute classification results")
@click.option('--data_base_root', type=str, help="path to the database")
@click.option('--gan_cinn_root', type=str, help="path to the data generated by the gan_cinn")
@click.option('--unit_root', type=str, help="path to the data generated by the unit")
def main(pca: bool, data_base_root: str, gan_cinn_root: str, unit_root: str, target: str = "val"):
    """
    Computes the principal components of the photoacoustics data using the sklearn.decomposition._pca.PCA.

    """
    if pca:
        compute_pca(data_base_root, gan_cinn_root, unit_root, target)


if __name__ == '__main__':
    main()
